class Solution {

      public static class pair{
        int x;
        int y;
        public pair(int x,int y){
            this.x=x;
            this.y=y;
        }
    }

     public static boolean isValid(int r,int c,int x,int y){
        if(x<0||x>=r||y<0||y>=c)
        return false;

        return true;
    }


    public int orangesRotting(int[][] grid) {
        int r=grid.length,c=grid[0].length,maxA=0,tempA=0;
        boolean visited[][] = new boolean[r][c];
        Queue<pair> q=new LinkedList<>();
        int[] dx={0,-1,1,0},dy={1,0,0,-1};
        pair src;
        int oLeft=0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==1)
                oLeft++;
                else if(grid[i][j]==2){
                    src=new pair(i,j);
                    q.add(src);
                    visited[i][j]=true;
                }
            }
        }
        
                    tempA=0;
                    // q.clear();
                    
                    
                    while(!q.isEmpty()){
                        int size=q.size();
                        tempA++;
                        for(int m=0;m<size;m++){

                        pair head=q.poll();
                        System.out.println(head.x+" "+head.y);
                        // visited[head.x][head.y]=true;
                      
                        // image[head.x][head.y]=color;
                        for(int k=0;k<4;k++){
                            int nx=head.x+dx[k],ny=head.y+dy[k];
                            if(isValid(r,c,nx,ny)&&grid[nx][ny]==1&&!visited[nx][ny]){
                            oLeft--;
                            visited[nx][ny]=true;
                            q.add(new pair(nx,ny));
                            }
                        }   
                        }
                    }
                    // System.out.println(tempA); 
                
            
        
        
    return (oLeft==0?(tempA>0?tempA-1:0):-1);
    }
}
